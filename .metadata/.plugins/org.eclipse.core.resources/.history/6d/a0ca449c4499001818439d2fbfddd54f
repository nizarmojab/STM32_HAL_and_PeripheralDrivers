/*
 * main.c
 *
 *  Created on: 02-Jun-2018
 *      Author: kiran
 */

#include <string.h>
#include <string.h>
#include "stm32f4xx_hal.h"
#include "main.h"


void GPIO_Init(void);
void Error_handler(void);
void TIMER6_Init(void);
void UART2_Init(void);
void SystemClock_Config_HSE(uint8_t clock_freq);
void SLEEP_Init(void);


TIM_HandleTypeDef htimer6;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef uartdma;
extern uint8_t some_data[];

uint8_t is_sleep_allowed=FALSE;

void debug(void)
{
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
}


void turn_off_peris(uint8_t off)
{
	if(off)
	{
		__HAL_RCC_GPIOA_CLK_DISABLE();
		__HAL_RCC_GPIOC_CLK_DISABLE();
		__HAL_RCC_USART2_CLK_DISABLE();

	}else{
		__HAL_RCC_GPIOA_CLK_ENABLE();
		__HAL_RCC_GPIOC_CLK_ENABLE();
		__HAL_RCC_USART2_CLK_ENABLE();
	}
}

int main(void)
{

	GPIO_Init();

	HAL_Init();

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);

	HAL_SuspendTick();

	UART2_Init();

	TIMER6_Init();

    //SLEEP_Init();

    TIM6->SR = 0;

	//Lets start the timer
	HAL_TIM_Base_Start_IT(&htimer6);

	while(1)
	{

		//going to sleep
		if(is_sleep_allowed)
		{
		__WFI();
		}

		//MCU resumes here after waking up

	}

	return 0;
}



/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
	Osc_Init.HSEState = RCC_HSE_ON;
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;

	switch(clock_freq)
	 {
	  case SYS_CLOCK_FREQ_50_MHZ:
		  Osc_Init.PLL.PLLM = 4;
		  Osc_Init.PLL.PLLN = 50;
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
		  Osc_Init.PLL.PLLQ = 2;
		  Osc_Init.PLL.PLLR = 2;
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
          flash_latency = 1;
	     break;

	  case SYS_CLOCK_FREQ_84_MHZ:
		  Osc_Init.PLL.PLLM = 4;
		  Osc_Init.PLL.PLLN = 84;
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
		  Osc_Init.PLL.PLLQ = 2;
		  Osc_Init.PLL.PLLR = 2;
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
          flash_latency = 2;
	     break;

	  case SYS_CLOCK_FREQ_120_MHZ:
		  Osc_Init.PLL.PLLM = 4;
		  Osc_Init.PLL.PLLN = 120;
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
		  Osc_Init.PLL.PLLQ = 2;
		  Osc_Init.PLL.PLLR = 2;
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
	{
			Error_handler();
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
	{
		Error_handler();
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
	HAL_SYSTICK_Config(hclk_freq/1000);

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);



 }

void SLEEP_Init(void)
{
	//Enable SLEEPONEXIT feature of the ARM Cortex Mx processor in SCR
	SCB->SCR |= ( 1 << 1);
}

void GPIO_Init(void)
{
    __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE();
    __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();

	GPIO_InitTypeDef ledgpio , buttongpio;
	ledgpio.Pin = GPIO_PIN_5;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA,&ledgpio);

	ledgpio.Pin = GPIO_PIN_12;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA,&ledgpio);


	buttongpio.Pin = GPIO_PIN_13;
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
	buttongpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC,&buttongpio);

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,15,0);


}



void UART2_Init(void)
{


	huart2.Instance = USART2;
	huart2.Init.BaudRate =230400;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;


 // __HAL_RCC_DMA1_CLK_ENABLE();

	uartdma.Instance = DMA1_Stream6;
	uartdma.Init.Channel =  DMA_CHANNEL_4;
	uartdma.Init.Direction = DMA_MEMORY_TO_PERIPH;
	uartdma.Init.MemInc = DMA_MINC_ENABLE;
	uartdma.Init.PeriphInc =DMA_PINC_DISABLE;
	uartdma.Init.Mode = DMA_NORMAL;
	uartdma.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	uartdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;


	uartdma.Instance = DMA1_Stream6;
	uartdma.Init.Channel = DMA_CHANNEL_4;
	uartdma.Init.Direction = DMA_MEMORY_TO_PERIPH;
	uartdma.Init.PeriphInc = DMA_PINC_DISABLE;
	uartdma.Init.MemInc = DMA_MINC_ENABLE;
	uartdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	uartdma.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	uartdma.Init.Mode = DMA_NORMAL;
	uartdma.Init.Priority = DMA_PRIORITY_LOW;
	uartdma.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
	uartdma.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
	uartdma.Init.MemBurst = DMA_MBURST_SINGLE;
	uartdma.Init.PeriphBurst = DMA_PBURST_SINGLE;



	if ( HAL_UART_Init(&huart2) != HAL_OK )
		{
			//There is a problem
			Error_handler();
		}

	HAL_DMA_Init(&uartdma);

	__HAL_LINKDMA(&huart2,hdmatx,uartdma);

	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);

	//HAL_DMA_RegisterCallback(&uartdma, HAL_DMA_XFER_CPLT_CB_ID, DMA_complete_callabck);

	//HAL_DMA_Start_IT(&uartdma,(uint32_t)some_data,(uint32_t) USART2->DR,strlen((char*)some_data));


}


void TIMER6_Init(void)
{
	htimer6.Instance = TIM6;
	htimer6.Init.Prescaler = 4999;
	htimer6.Init.Period = 32-1;
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
	{
		Error_handler();
	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	//turn_off_peris(0);
#if 0
	 if ( HAL_UART_Transmit_DMA(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data)) != HAL_OK)
	 {
		 Error_handler();
	 }
#else
#if 0
	 if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
	 {
		 Error_handler();
	 }
#else
	 if (HAL_UART_Transmit_IT(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data))\
		!= HAL_OK)
	 {
		 Error_handler();
	 }
#endif
	  is_sleep_allowed = TRUE;
#endif

	// turn_off_peris(1);

}



 void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
	// HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
	// HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
	// HAL_UART_DMAStop(huart);

}

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	// HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
	// HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);

	 is_sleep_allowed = TRUE;
}

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	// HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY);

	 HAL_UART_Transmit_IT(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data));
	 is_sleep_allowed = TRUE;
}

void Error_handler(void)
{
	while(1);
}

